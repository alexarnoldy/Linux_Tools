.Working with hardened, minimized, and JeOS images:
* A lot of functions require the `kernel-default` package `kernel-default-base` won't provide all of the needed pieces
** The resultant errors are nearly useless
** Examples are 802.11q VLANS and NFS server
** For automated deployments can try to add something like: `zypper in --force-resolution --no-confirm --force kernel-default`
** Basically if something pretty simple doesn't work, look for the `kernel-default` package.

## VM images can sometimes lose eth0 and or other interfaces after updating
* Remove /etc/udev/rules.d/70-persistent-net.rules and reboot

## Mounting a qcow2 image, where the image file exists in the filesystem:

NOTE: An alternative to mounting a qcow2 image on a VM is to provide it as an additional HDD to the VM, then mount it normally.

https://gist.github.com/shamil/62935d9b456a6f9877b5
----
Step 1 - Enable NBD on the Host: sudo modprobe nbd max_part=8

export PATH_TO_QCOW2=""

Step 2 - Connect the QCOW2 as network block device: sudo qemu-nbd --connect=/dev/nbd0 ${PATH_TO_QCOW2}

NOTE: May need to install qemu-tools to get `qemu-nbd`

Step 3 - Find The Virtual Machine Partitions: sudo fdisk /dev/nbd0 -l

export PARTITION_TO_MOUNT=""
export MOUNTPOINT=""
Step 4 - Mount the partition from the VM: sudo mount /dev/nbd0p${PARTITION_TO_MOUNT} ${MOUNTPOINT}

Step 5 - After you done, unmount and disconnect:
sudo umount ${MOUNTPOINT}
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd
----

## Mounting and updating a qcow2 image:

TIP: Mounting a qcow2 image onto a VM that is booted from copy of a the same image seems to fail miserably. There is likely some signture or bootblock (at least with XFS) that can't have mounted duplicates)



## Miscellaneous commands:
sudo virsh net-dhcp-leases default
* See DHCP addresses leased on the network named default

https://computingforgeeks.com/virsh-commands-cheatsheet/
* virt-ls and virt-cat 
** To ls directories and cat files in a running VM

virsh dominfo <name of domain>
* Config of the VM

sudo virsh domifaddr <name of domain>
* IP and MAC of VM


.Expand a .qcow2 image, plus the internal partitions and filesystems:
* Likely won't work if the image has snapshots
* Seems like you need to do the whole procedure once for each partition that needs to be expanded

* With the VM booted, use df -h to determine which partition number need to be expanded
** Note that they may be /dev/vda* but the libvirt commands will refer to them as /dev/sda. 
   The most important thing is the partition number.
* Power off VM

`IMAGE=<image.qcow2>`
`PARTITION_NUMBER=<#>`
`virt-filesystems --long -h --all -a $IMAGE`

* Make a copy of the image before starting. I've munged up several images trying this and wish I had made a copy first.
`cp $IMAGE /var/tmp/`

* Check the image:
`qemu-img check -r all $IMAGE`

The variable below is a number, i.e. 2, plus a letter 
  designator for megabytes, gigabytes, terabyes, i.e. G. 
**  `export CAPACITY_TO_ADD=2G` would be used to add two gigabytes to the image:
`export CAPACITY_TO_ADD=<#><M,G,T>`
`qemu-img resize $IMAGE +$CAPACITY_TO_ADD`

* Verify the logical image size has grown, though the partitions have not:
`virt-filesystems --long -h --all -a $IMAGE`



* Expand the partition and filesystem:
`cp $IMAGE $IMAGE-orig`
`virt-resize --expand /dev/sda$PARTITION_NUMBER $IMAGE-orig $IMAGE`

* Verify the correct partition has taken up the desired capacity
`virt-filesystems --long -h --all -a $IMAGE`

* Boot the image and verify the image, partition, and filesystem have been expanded
** If everything works, you can delete the $IMAGE-orig and the copy in /var/tmp/
`rm $IMAGE-orig /var/tmp/$IMAGE`

.virt-manager connecting to a different host repeatedly asks for ssh, or openSSH password:
* Caused by spice setting up a unique ssh connection for each I/O channel (i.e. video, mouse, USB, sound, etc.)
** Even if they're not usable for other reasons, i.e. sound
* You can just keep entering the password as it will end once all of the connections are established. 
** It may ask a couple more times for CDROM, etc. if they are added after the connection is first established.
     
* One way to allow it to happen without driving you crazy is to:
** Check to see if ssh-agent is running: `ps -ef | grep -i ssh-agent`
*** Start it if it's not running: `eval $(ssh-agent)`
** See if you have keys loaded: `ssh-add -l`
** Add keys if it says "The agent has no identities: `ssh-add`
*** This won't work if there aren't ssh keys passed through from another host
** Check again if keys have been passed to ssh-agent: `ssh-add -l`
*** If not, manually add a key: `ssh-add <FQPN of private key>`
**** I.e. `ssh-add /home/admin.ssh/id_rsa`
** Enable key-exchange ssh with the host you're trying to connect virt-manager to: `ssh-copy-id user@host`
** This should allow all ssh connections to be established automatically


### Clone a VM:
* `virt-clone -o <original VM> -n <new VM> -f <FQPN for new drive file>

### Snapshot VM:
* Command to convert the raw disk format to qcow2: `qemu-img convert -f raw -O qcow2 image-name.img image-name.qcow2`

* Take snapshot: `sudo virsh snapshot-create-as {vm_name} --name {snapshot_name} --description  “optional description”`
** Add `--live` to snapshot a running VM
* Revert snapshot: `sudo virsh snapshot-revert {vm_name} {snapshot_name}`
* Delete most recent (or only) snapshot: `sudo virsh snapshot-delete --domain mstr2.suse.hpc.local  --current`





